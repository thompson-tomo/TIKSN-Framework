using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace AntimalwareScanning;

public partial class ScannerWorker : BackgroundService
{
    private readonly IServiceScopeFactory serviceScopeFactory;

    public ScannerWorker(IServiceScopeFactory serviceScopeFactory) => this.serviceScopeFactory = serviceScopeFactory ?? throw new ArgumentNullException(nameof(serviceScopeFactory));

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            var scope = this.serviceScopeFactory.CreateAsyncScope();
            await using (scope.ConfigureAwait(false))
            {
                var logger = scope.ServiceProvider.GetRequiredService<ILogger<ScannerWorker>>();
                var timeProvider = scope.ServiceProvider.GetRequiredService<TimeProvider>();
                var scannerService = scope.ServiceProvider.GetRequiredService<IScannerService>();

                LogStartScanning(logger, timeProvider.GetLocalNow());
                await scannerService.ExecuteAsync(stoppingToken).ConfigureAwait(false);
                LogFinishedScanning(logger, timeProvider.GetLocalNow());

                var interval = TimeSpan.FromMinutes(5);
                LogWaiting(logger, interval);
                await Task.Delay(interval, stoppingToken).ConfigureAwait(false);
            }
        }
    }

    [LoggerMessage(
        EventId = 5838559,
        Level = LogLevel.Information,
        Message = "Finished Scanning `{TimeStamp}`")]
    private static partial void LogFinishedScanning(ILogger logger, DateTimeOffset timestamp);

    [LoggerMessage(
        EventId = 5838467,
        Level = LogLevel.Information,
        Message = "Starting Scanning `{TimeStamp}`")]
    private static partial void LogStartScanning(ILogger logger, DateTimeOffset timestamp);

    [LoggerMessage(
        EventId = 5839246,
        Level = LogLevel.Information,
        Message = "Waiting for `{Interval}`")]
    private static partial void LogWaiting(ILogger logger, TimeSpan interval);
}
