using System.Text;
using Microsoft.Extensions.Logging;
using TIKSN.Security.Antimalware;

namespace AntimalwareScanning;

public partial class ScannerService : IScannerService
{
    private readonly IAntimalwareScanner antimalwareScanner;
    private readonly ILogger<ScannerService> logger;
    private readonly TimeProvider timeProvider;

    public ScannerService(
        IAntimalwareScanner antimalwareScanner,
        TimeProvider timeProvider,
        ILogger<ScannerService> logger)
    {
        this.antimalwareScanner = antimalwareScanner ?? throw new ArgumentNullException(nameof(antimalwareScanner));
        this.timeProvider = timeProvider ?? throw new ArgumentNullException(nameof(timeProvider));
        this.logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task ExecuteAsync(CancellationToken cancellationToken)
    {
        LogStartScanning(this.logger, this.timeProvider.GetLocalNow());
        var user = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        var downloadsPath = Path.Combine(user, "Downloads");
        foreach (var filePath in Directory.GetFiles(downloadsPath, "*.*", SearchOption.AllDirectories))
        {
            LogStartScanningFile(this.logger, this.timeProvider.GetLocalNow(), filePath);
            var scanResult = await this.ScanAsync(filePath, cancellationToken).ConfigureAwait(false);
            LogScanResult(this.logger, filePath, scanResult);
        }

        LogFinishedScanning(this.logger, this.timeProvider.GetLocalNow());
    }

    [LoggerMessage(
        EventId = 5839034,
        Level = LogLevel.Information,
        Message = "Finished Scanning `{TimeStamp}`")]
    private static partial void LogFinishedScanning(ILogger logger, DateTimeOffset timestamp);

    [LoggerMessage(
        EventId = 5840765,
        Level = LogLevel.Information,
        Message = "Finished Scanning `{FilePath}` with result `{ScanResult}`")]
    private static partial void LogScanResult(ILogger logger, string filePath, AntimalwareScanResult scanResult);

    [LoggerMessage(
        EventId = 5839040,
        Level = LogLevel.Information,
        Message = "Starting Scanning `{TimeStamp}`")]
    private static partial void LogStartScanning(ILogger logger, DateTimeOffset timestamp);

    [LoggerMessage(
        EventId = 5839544,
        Level = LogLevel.Information,
        Message = "Starting Scanning file `{FilePath}` at `{TimeStamp}`")]
    private static partial void LogStartScanningFile(ILogger logger, DateTimeOffset timestamp, string filePath);

    private async Task<AntimalwareScanResult> ScanAsync(string filePath, CancellationToken cancellationToken)
    {
        var fileContent = await File.ReadAllBytesAsync(filePath, cancellationToken).ConfigureAwait(false);
        var isText = Ascii.IsValid(fileContent);
        if (isText)
        {
            var fileText = Encoding.ASCII.GetString(fileContent);
            if (string.IsNullOrEmpty(fileText))
            {
                return AntimalwareScanResult.Safe;
            }
            return this.antimalwareScanner.ScanString(fileText, filePath);
        }

        return this.antimalwareScanner.ScanBinaryArray(fileContent, filePath);
    }
}
