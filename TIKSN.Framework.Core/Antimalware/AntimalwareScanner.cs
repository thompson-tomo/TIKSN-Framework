using System;
using System.Reactive.Disposables;
using System.Runtime.InteropServices;
using TIKSN.Configuration;

namespace TIKSN.Security.Antimalware
{
    public class AntimalwareScanner : IAntimalwareScanner, IDisposable
    {
        private const int S_OK = 0x00000000;
        private readonly IPartialConfiguration<AntimalwareScannerOptions> _antimalwareScannerOptions;
        private readonly object _initializationLocker = new();
        private IntPtr? _amsiContext;
        private bool _disposed;

        public AntimalwareScanner(IPartialConfiguration<AntimalwareScannerOptions> antimalwareScannerOptions) =>
            this._antimalwareScannerOptions = antimalwareScannerOptions;

        public AntimalwareScanResult ScanBinaryArray(byte[] binary, string contentName)
        {
            using (this.OpenSession(out var session))
            {
                var unmanagedPointer = Marshal.AllocHGlobal(binary.Length);
                Marshal.Copy(binary, 0, unmanagedPointer, binary.Length);

                var result = AmsiScanBuffer(this._amsiContext.Value, unmanagedPointer, (uint)binary.Length, contentName,
                    session, out var amsiResult);

                Marshal.FreeHGlobal(unmanagedPointer);

                EnsureSuccess(result);

                return ConvertToAntimalwareScanResult(amsiResult);
            }
        }

        public AntimalwareScanResult ScanString(string @string, string contentName)
        {
            using (this.OpenSession(out var session))
            {
                var result = AmsiScanString(this._amsiContext.Value, @string, contentName, session, out var amsiResult);

                EnsureSuccess(result);

                return ConvertToAntimalwareScanResult(amsiResult);
            }
        }

        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected static void EnsureSuccess(int result)
        {
            if (result != S_OK)
            {
                throw new InvalidOperationException($"HRESULT ({result}) does not indicate success.");
            }
        }

        protected virtual void Dispose(bool disposing)
        {
            if (this._disposed)
            {
                return;
            }

            //if (disposing)

            this.Uninitialize();

            this._disposed = true;
        }

        protected void EnsureInitialized()
        {
            if (this._amsiContext.HasValue)
            {
                return;
            }

            this.Initialize();
        }

        protected void Initialize()
        {
            var applicationName = this._antimalwareScannerOptions.GetConfiguration().ApplicationName;

            lock (this._initializationLocker)
            {
                if (!this._amsiContext.HasValue)
                {
                    AmsiInitialize(applicationName, out var amsiContext);
                    this._amsiContext = amsiContext;
                }
            }
        }

        protected IDisposable OpenSession(out IntPtr session)
        {
            this.EnsureInitialized();

            var result = AmsiOpenSession(this._amsiContext.Value, out var amsiSession);

            EnsureSuccess(result);

            session = amsiSession;

            return Disposable.Create(() => AmsiCloseSession(this._amsiContext.Value, amsiSession));
        }

        protected void Uninitialize()
        {
            lock (this._initializationLocker)
            {
                if (this._amsiContext.HasValue)
                {
                    AmsiUninitialize(this._amsiContext.Value);
                }
            }
        }

        [DllImport("Amsi.dll", EntryPoint = "AmsiCloseSession", CallingConvention = CallingConvention.StdCall)]
        private static extern void AmsiCloseSession(IntPtr amsiContext, IntPtr session);

        [DllImport("Amsi.dll", EntryPoint = "AmsiInitialize", CallingConvention = CallingConvention.StdCall)]
        private static extern int AmsiInitialize([MarshalAs(UnmanagedType.LPWStr)] string appName,
            out IntPtr amsiContext);

        [DllImport("Amsi.dll", EntryPoint = "AmsiOpenSession", CallingConvention = CallingConvention.StdCall)]
        private static extern int AmsiOpenSession(IntPtr amsiContext, out IntPtr session);

        //This method apparently exists on MSDN but not in AMSI.dll (version 4.9.10586.0)
        //[DllImport("Amsi.dll", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
        //private static extern bool AmsiResultIsMalware(AMSI_RESULT result);

        [DllImport("Amsi.dll", EntryPoint = "AmsiScanBuffer", CallingConvention = CallingConvention.StdCall)]
        private static extern int AmsiScanBuffer(IntPtr amsiContext, IntPtr buffer, uint length,
            [MarshalAs(UnmanagedType.LPWStr)][In] string contentName, IntPtr session, out AMSI_RESULT result);

        [DllImport("Amsi.dll", EntryPoint = "AmsiScanString", CallingConvention = CallingConvention.StdCall)]
        private static extern int AmsiScanString(IntPtr amsiContext,
            [In][MarshalAs(UnmanagedType.LPWStr)] string @string,
            [In][MarshalAs(UnmanagedType.LPWStr)] string contentName, IntPtr session, out AMSI_RESULT result);

        [DllImport("Amsi.dll", EntryPoint = "AmsiUninitialize", CallingConvention = CallingConvention.StdCall)]
        private static extern void AmsiUninitialize(IntPtr amsiContext);

        private static AntimalwareScanResult ConvertToAntimalwareScanResult(AMSI_RESULT result)
        {
            switch (result)
            {
                case AMSI_RESULT.CLEAN:
                case AMSI_RESULT.NOT_DETECTED:
                    return AntimalwareScanResult.Safe;

                case AMSI_RESULT.DETECTED:
                    return AntimalwareScanResult.Unsafe;

                default:
                    return AntimalwareScanResult.Unknown;
            }
        }

        private enum AMSI_RESULT
        {
            CLEAN = 0,
            NOT_DETECTED = 1,
            BLOCKED_BY_ADMIN_START = 16384,
            BLOCKED_BY_ADMIN_END = 20479,
            DETECTED = 32768
        }
    }
}
