using System.Reactive.Disposables;
using System.Runtime.InteropServices;
using TIKSN.Configuration;
using TIKSN.Security.Antimalware;

namespace TIKSN.Platforms.Windows.Security.Antimalware;

public class AntimalwareScanner : IAntimalwareScanner, IDisposable
{
    private const int RESULT_OK = 0x00000000;
    private readonly IPartialConfiguration<AntimalwareScannerOptions> antimalwareScannerOptions;
    private readonly object initializationLocker = new();
    private IntPtr? amsiContext;
    private bool disposed;

    public AntimalwareScanner(
        IPartialConfiguration<AntimalwareScannerOptions> antimalwareScannerOptions)
        => this.antimalwareScannerOptions = antimalwareScannerOptions;

    private enum AMSI_RESULT
    {
        CLEAN = 0,
        NOT_DETECTED = 1,
        BLOCKED_BY_ADMIN_START = 16384,
        BLOCKED_BY_ADMIN_END = 20479,
        DETECTED = 32768,
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    public AntimalwareScanResult ScanBinaryArray(
        byte[] binary,
        string contentName)
    {
        ArgumentNullException.ThrowIfNull(binary);

        if (string.IsNullOrEmpty(contentName))
        {
            throw new ArgumentException($"'{nameof(contentName)}' cannot be null or empty.", nameof(contentName));
        }

        using (this.OpenSession(out var session))
        {
            var unmanagedPointer = Marshal.AllocHGlobal(binary.Length);
            Marshal.Copy(binary, 0, unmanagedPointer, binary.Length);

            var result = AmsiScanBuffer(this.amsiContext.Value, unmanagedPointer, (uint)binary.Length, contentName,
                session, out var amsiResult);

            Marshal.FreeHGlobal(unmanagedPointer);

            EnsureSuccess(result);

            return ConvertToAntimalwareScanResult(amsiResult);
        }
    }

    public AntimalwareScanResult ScanString(
        string stringValue,
        string contentName)
    {
        if (string.IsNullOrEmpty(stringValue))
        {
            throw new ArgumentException($"'{nameof(stringValue)}' cannot be null or empty.", nameof(stringValue));
        }

        if (string.IsNullOrEmpty(contentName))
        {
            throw new ArgumentException($"'{nameof(contentName)}' cannot be null or empty.", nameof(contentName));
        }

        using (this.OpenSession(out var session))
        {
            var result = AmsiScanString(this.amsiContext.Value, stringValue, contentName, session, out var amsiResult);

            EnsureSuccess(result);

            return ConvertToAntimalwareScanResult(amsiResult);
        }
    }

    protected static void EnsureSuccess(int result)
    {
        if (result != RESULT_OK)
        {
            throw new InvalidOperationException($"HRESULT ({result}) does not indicate success.");
        }
    }

    protected virtual void Dispose(bool disposing)
    {
        if (this.disposed)
        {
            return;
        }

        //if (disposing)

        this.Uninitialize();

        this.disposed = true;
    }

    protected void EnsureInitialized()
    {
        if (this.amsiContext.HasValue)
        {
            return;
        }

        this.Initialize();
    }

    protected void Initialize()
    {
        var applicationName = this.antimalwareScannerOptions.GetConfiguration().ApplicationName;

        lock (this.initializationLocker)
        {
            if (!this.amsiContext.HasValue)
            {
                _ = AmsiInitialize(applicationName, out var amsiContext);
                this.amsiContext = amsiContext;
            }
        }
    }

    protected IDisposable OpenSession(out IntPtr session)
    {
        this.EnsureInitialized();

        var result = AmsiOpenSession(this.amsiContext.Value, out var amsiSession);

        EnsureSuccess(result);

        session = amsiSession;

        return Disposable.Create(() => AmsiCloseSession(this.amsiContext.Value, amsiSession));
    }

    protected void Uninitialize()
    {
        lock (this.initializationLocker)
        {
            if (this.amsiContext.HasValue)
            {
                AmsiUninitialize(this.amsiContext.Value);
            }
        }
    }

    [DllImport("Amsi.dll", EntryPoint = "AmsiCloseSession", CallingConvention = CallingConvention.StdCall)]
    private static extern void AmsiCloseSession(IntPtr amsiContext, IntPtr session);

    [DllImport("Amsi.dll", EntryPoint = "AmsiInitialize", CallingConvention = CallingConvention.StdCall)]
    private static extern int AmsiInitialize([MarshalAs(UnmanagedType.LPWStr)] string appName,
        out IntPtr amsiContext);

    [DllImport("Amsi.dll", EntryPoint = "AmsiOpenSession", CallingConvention = CallingConvention.StdCall)]
    private static extern int AmsiOpenSession(IntPtr amsiContext, out IntPtr session);

    //This method apparently exists on MSDN but not in AMSI.dll (version 4.9.10586.0)
    //[DllImport("Amsi.dll", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
    //private static extern bool AmsiResultIsMalware(AMSI_RESULT result);

    [DllImport("Amsi.dll", EntryPoint = "AmsiScanBuffer", CallingConvention = CallingConvention.StdCall)]
    private static extern int AmsiScanBuffer(IntPtr amsiContext, IntPtr buffer, uint length,
        [MarshalAs(UnmanagedType.LPWStr)][In] string contentName, IntPtr session, out AMSI_RESULT result);

    [DllImport("Amsi.dll", EntryPoint = "AmsiScanString", CallingConvention = CallingConvention.StdCall)]
    private static extern int AmsiScanString(IntPtr amsiContext,
        [In][MarshalAs(UnmanagedType.LPWStr)] string @string,
        [In][MarshalAs(UnmanagedType.LPWStr)] string contentName, IntPtr session, out AMSI_RESULT result);

    [DllImport("Amsi.dll", EntryPoint = "AmsiUninitialize", CallingConvention = CallingConvention.StdCall)]
    private static extern void AmsiUninitialize(IntPtr amsiContext);

    private static AntimalwareScanResult ConvertToAntimalwareScanResult(AMSI_RESULT result) => result switch
    {
        AMSI_RESULT.CLEAN or AMSI_RESULT.NOT_DETECTED => AntimalwareScanResult.Safe,
        AMSI_RESULT.DETECTED => AntimalwareScanResult.Unsafe,
        AMSI_RESULT.BLOCKED_BY_ADMIN_START => AntimalwareScanResult.Unknown,
        AMSI_RESULT.BLOCKED_BY_ADMIN_END => AntimalwareScanResult.Unknown,
        _ => AntimalwareScanResult.Unknown,
    };
}
